{"version":3,"sources":["assets/home.svg","assets/development.svg","constants/colours.js","components/Header.js","actions/actions.js","components/BoobIconContainer.js","components/Timer.js","components/Notification.js","components/NavBar.js","App.js","serviceWorker.js","reducers/reducers.js","store.js","index.js"],"names":["module","exports","white","Title","styled","p","Header","React","Component","FINISH_FEED","finishFeed","date","leftTime","rightTime","type","payload","IconContainer","div","BoobIcon","button","selected","ButtonText","PauseStartButton","mapDispatchToProps","connect","state","current","history","buttonText","side","feedCounter","setFeedCounter","isActive","setIsActive","timeStarted","setTimeStarted","isPaused","setIsPaused","console","log","callback","delay","savedCallback","useRef","useEffect","id","setInterval","clearInterval","useInterval","onClick","Date","now","ButtonContainer","DoneButton","TotalTimeText","time","useState","leftFeedCounter","setLeftFeedCounter","rightFeedCounter","setRightFeedCounter","undefined","leftSideActive","setLeftSideActive","totalTime","NotificationContainer","NotificationText","StrongSpan","span","Notification","NavIconContainer","NavIcons","img","NavBar","src","home","alt","activity","MainContainer","App","Boolean","window","location","hostname","match","initialState","leftBoob","rightBoob","rootReducer","action","createStore","rootElement","document","getElementById","ReactDOM","render","store","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89b89bbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home.83e24a55.svg\";","module.exports = __webpack_public_path__ + \"static/media/development.fa20f2a7.svg\";","export const white = '#FFFFFF';\nexport const peach = '#F08387';\nexport const darkPeach = '#D66F72'\nexport const orange = '#EAB575';","import React from 'react';\nimport styled from 'styled-components';\nimport { white } from '../constants/colours';\n\nconst Title = styled.p`\n    font-size: 24px;\n    color: ${white};\n    padding-top: 50px;\n    margin-top: 0;\n    text-align: center;\n`;\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <Title>which buub?</Title>\n        )\n    }\n};\n\nexport default Header;","export const FINISH_FEED = 'FINISH_FEED';\n\nexport function finishFeed(date, leftTime, rightTime) {\n    return {\n        type: FINISH_FEED,\n        payload: {\n            date: date,\n            leftTime: leftTime,\n            rightTime: rightTime,\n        }\n    };\n}","import React, { useEffect, useRef } from 'react';\nimport { connect } from 'react-redux'\nimport styled from 'styled-components';\nimport { darkPeach, white } from '../constants/colours';\nimport { finishFeed } from '../actions/actions';\n\nconst IconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst BoobIcon = styled.button`\n    background-color: ${white};\n    width: 120px;\n    height: 120px;\n    border: 3px solid ${({ selected }) => selected ? darkPeach : white};\n    border-radius: 50%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    outline: none;\n`;\n\nconst ButtonText = styled.p`\n  color: ${darkPeach};\n  font-weight: 700;\n  font-size: 1.1rem;\n`;\n\nconst PauseStartButton = styled.div`\n  color: ${darkPeach};\n  padding: 8px;\n  border-radius: 10px;\n  font-weight: 600;\n`;\n\n\n\n// CUSTOM HOOK: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n// END OF CUSTOM HOOK\n\nconst BoobIconContainer = ({\n  history,\n  current,\n  side,\n  finishFeed,\n  feedCounter,\n  setFeedCounter,\n  isActive,\n  setIsActive,\n  timeStarted,\n  setTimeStarted,\n  isPaused,\n  setIsPaused\n}) => {\n\n  console.log(isPaused);\n\n  useInterval(() => {\n    if (isActive) {\n      setFeedCounter(feedCounter + 1);\n    }\n  }, !isPaused ? 1000 : null);\n\n\n  let buttonText;\n\n  if (!timeStarted) {\n    buttonText = 'START';\n  } else if (isActive && timeStarted && !isPaused) {\n    buttonText = 'PAUSE';\n  } else {\n    buttonText = 'RESUME'\n  }\n\n\n  const handleClick = () => {\n    if (!timeStarted) { // if it is the very first click\n      setTimeStarted(Date.now());\n      setIsPaused(false);\n      setIsActive(true);\n    } else if (isActive) { // if I'm the active container and I've been clicked\n      setIsPaused(!isPaused);\n    } else { // if I'm the inactive container and I've been clicked\n      setIsActive(true);\n      setIsPaused(false);\n    }\n  }\n\n  return (\n    <IconContainer>\n      <BoobIcon\n        onClick={handleClick}\n        selected={isActive}\n      >\n        <ButtonText>{side}: {feedCounter} s</ButtonText>\n        <PauseStartButton>{buttonText}</PauseStartButton>\n      </BoobIcon>\n    </IconContainer >\n  )\n\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    current: state.current,\n    history: state.history,\n  }\n}\n\nconst mapDispatchToProps = { finishFeed }\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BoobIconContainer)","import React, { useState } from 'react';\nimport { connect } from 'react-redux'\nimport styled from 'styled-components';\nimport { white, darkPeach } from '../constants/colours';\nimport { finishFeed } from '../actions/actions';\nimport BoobIconContainer from './BoobIconContainer';\n\nconst IconContainer = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst DoneButton = styled.button`\n    border: 2px solid ${darkPeach};\n    border-radius: 5px;\n    background-color: ${white};\n    color: ${darkPeach}\n    font-size: 1.1rem;\n    font-weight: 700;\n    padding: 12px 40px;\n    width: 50%;\n`;\n\nconst TotalTimeText = styled.p`\n  color: ${white};\n  font-size: 1.1rem;\n  font-weight: 700;\n`;\n\n\nconst Timer = ({ current, history, finishFeed }) => {\n  const [leftFeedCounter, setLeftFeedCounter] = useState(0);\n  const [rightFeedCounter, setRightFeedCounter] = useState(0);\n  const [timeStarted, setTimeStarted] = useState('');\n  const [leftSideActive, setLeftSideActive] = useState(undefined);\n  const [isPaused, setIsPaused] = useState(true);\n\n  const handleFinishFeed = () => {\n    const date = timeStarted;\n    const leftTime = leftFeedCounter;\n    const rightTime = rightFeedCounter;\n\n    finishFeed(date, leftTime, rightTime);\n    setLeftFeedCounter(0);\n    setRightFeedCounter(0);\n    setLeftSideActive(undefined);\n    setTimeStarted('');\n    setIsPaused(true);\n  };\n\n\n  const totalTime = leftFeedCounter + rightFeedCounter;\n\n  //if totalTime is greater than 60, return second count divided by 60 and ending should be minutes\n  //if totalTime minutes are greater than 60, return hour, minutes, seconds.\n\n  const secondsToTime = (time) => {\n    return (time - (time %= 60)) / 60 + (9 < time ? ':' : ':0') + time\n  }\n\n  return (\n    <div>\n      <IconContainer>\n        <BoobIconContainer\n          feedCounter={leftFeedCounter}\n          setFeedCounter={setLeftFeedCounter}\n          isActive={leftSideActive === true}\n          setIsActive={() => setLeftSideActive(true)}\n          timeStarted={timeStarted}\n          setTimeStarted={setTimeStarted}\n          isPaused={isPaused}\n          setIsPaused={setIsPaused}\n          side='Left'\n        />\n        <BoobIconContainer\n          feedCounter={rightFeedCounter}\n          setFeedCounter={setRightFeedCounter}\n          isActive={leftSideActive === false}\n          setIsActive={() => setLeftSideActive(false)}\n          timeStarted={timeStarted}\n          setTimeStarted={setTimeStarted}\n          isPaused={isPaused}\n          setIsPaused={setIsPaused}\n          side='Right'\n        />\n      </IconContainer>\n      <ButtonContainer>\n        <TotalTimeText>TOTAL TIME: {secondsToTime(totalTime)} seconds </TotalTimeText>\n        <DoneButton onClick={handleFinishFeed}>DONE</DoneButton>\n      </ButtonContainer >\n    </div >\n  )\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    current: state.current,\n    history: state.history,\n  }\n}\n\nconst mapDispatchToProps = { finishFeed }\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Timer)\n","import React from 'react';\nimport styled from 'styled-components';\nimport { white, darkPeach } from '../constants/colours';\n\nconst NotificationContainer = styled.div`\n    border: 1px solid ${white};\n    border-radius: 5px;\n    padding: 6px;\n    margin: 0 12px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst NotificationText = styled.p`\n    font-size: 16px;\n    color: ${white};\n    text-align: center;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n  color: ${darkPeach};\n`;\n\nclass Notification extends React.Component {\n  render() {\n    return (\n      <NotificationContainer>\n        <NotificationText>You last fed on the <StrongSpan>LEFT</StrongSpan> side</NotificationText>\n      </NotificationContainer>\n    )\n  }\n};\n\nexport default Notification;","import React from 'react';\nimport styled from 'styled-components';\nimport home from '../assets/home.svg';\nimport activity from '../assets/development.svg';\nimport { white } from '../constants/colours';\n\nconst NavIconContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  border-top: solid 2px ${white};\n  padding: 12px 0;\n  height: 15vh;\n`;\n\nconst NavIcons = styled.img`\n    max-width: 36px;\n`;\n\nclass NavBar extends React.Component {\n  render() {\n    return (\n      <NavIconContainer>\n        <NavIcons src={home} alt=\"home icon\" />\n        <NavIcons src={activity} alt=\"activity log icon\" />\n      </NavIconContainer>\n    )\n  }\n};\n\nexport default NavBar;","import React from 'react';\nimport styled from 'styled-components';\nimport Header from './components/Header';\nimport Timer from './components/Timer';\nimport Notification from './components/Notification';\nimport NavBar from './components/NavBar';\nimport { peach, orange } from './constants/colours';\n\n\nconst MainContainer = styled.div`\n  background-image: linear-gradient(to bottom right, ${peach}, ${orange}); \n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nfunction App() {\n  return (\n    <MainContainer>\n      <Header />\n      <Timer />\n      <Notification />\n      <NavBar />\n    </MainContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FINISH_FEED } from '../actions/actions';\n\nconst initialState = {\n  current: {\n    date: null,\n    leftBoob: {\n      time: 0\n    },\n    rightBoob: {\n      time: 0\n    }\n  },\n  history: []\n};\n\nfunction rootReducer(state = initialState, action) {\n  console.log(\"every action\", action)\n\n  switch (action.type) {\n    // case 'finish': {\n    //   return {\n    //     ...state,\n    //     history: [\n    //       ...state.history,\n    //       action.payload\n    //     ]\n    //   }\n    // }\n    case FINISH_FEED:\n      return (\n        {\n          current: {\n            date: action.date,\n            leftBoob: {\n              time: action.leftTime\n            },\n            rightBoob: {\n              time: action.rightTime\n            }\n          },\n          history: [\n            ...state.history,\n            action.payload\n          ]\n        });\n    default:\n      return state;\n  };\n}\n\nexport default rootReducer;","import { createStore } from 'redux';\nimport rootReducer from './reducers/reducers';\n\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n)\nserviceWorker.unregister();\n"],"sourceRoot":""}