{"version":3,"sources":["assets/home.svg","assets/development.svg","constants/colours.js","components/Header.js","actions/actions.js","components/BoobIconContainer.js","components/Timer.js","components/Notification.js","components/Home.js","components/History.js","App.js","serviceWorker.js","reducers/reducers.js","store.js","index.js"],"names":["module","exports","white","Title","styled","p","Header","React","Component","FINISH_FEED","finishFeed","date","leftTime","rightTime","side","type","payload","lastFedOnLeftSide","IconContainer","div","BoobIcon","button","selected","ButtonText","PauseStartButton","mapDispatchToProps","connect","state","current","history","buttonText","feedCounter","setFeedCounter","isActive","setIsActive","timeStarted","setTimeStarted","isPaused","setIsPaused","callback","delay","savedCallback","useRef","useEffect","id","setInterval","clearInterval","useInterval","time","onClick","Date","now","Math","floor","ButtonContainer","DoneButton","disabled","TotalTimeText","useState","leftFeedCounter","setLeftFeedCounter","rightFeedCounter","setRightFeedCounter","undefined","leftSideActive","setLeftSideActive","totalTime","NotificationContainer","NotificationText","StrongSpan","span","Notification","length","_","last","timeLastFed","moment","format","console","log","MainContainer","Home","FeedItemContainer","FeedItemText","FeedHeader","History","historyItems","map","i","dateTime","key","noHistory","NavIconContainer","NavIcons","img","exact","path","to","src","home","alt","activity","Boolean","window","location","hostname","match","initialState","leftBoob","rightBoob","rootReducer","action","createStore","rootElement","document","getElementById","ReactDOM","render","store","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85c9b521.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home.79db509f.svg\";","module.exports = __webpack_public_path__ + \"static/media/development.a2b8b6dd.svg\";","export const white = '#FFFFFF';\nexport const peach = '#F08387';\nexport const darkPeach = '#D66F72'\nexport const lightPeach = '#EAB9BA'\nexport const orange = '#EAB575';","import React from 'react';\nimport styled from 'styled-components';\nimport { white } from '../constants/colours';\n\nconst Title = styled.p`\n    font-size: 24px;\n    color: ${white};\n    padding-top: 50px;\n    margin-top: 0;\n    text-align: center;\n`;\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <Title>which buub?</Title>\n        )\n    }\n};\n\nexport default Header;","export const FINISH_FEED = 'FINISH_FEED';\n\nexport function finishFeed(date, leftTime, rightTime, side) {\n    return {\n        type: FINISH_FEED,\n        payload: {\n            date: date,\n            leftTime: leftTime,\n            rightTime: rightTime,\n            lastFedOnLeftSide: side\n        }\n    };\n}","import React, { useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { darkPeach, white } from '../constants/colours';\nimport { finishFeed } from '../actions/actions';\n\nconst IconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst BoobIcon = styled.button`\n    background-color:  ${({ selected }) => selected ? darkPeach : white};\n    width: 120px;\n    height: 120px;\n    border-radius: 50%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    outline: none;\n    border: none;\n`;\n\nconst ButtonText = styled.p`\n  color:  ${({ selected }) => selected ? white : darkPeach};\n  font-weight: 700;\n  font-size: 1.1rem;\n`;\n\nconst PauseStartButton = styled.div`\n  color:  ${({ selected }) => selected ? white : darkPeach};\n  padding: 8px;\n  border-radius: 10px;\n  font-weight: 600;\n`;\n\n\n\n// CUSTOM HOOK: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n// END OF CUSTOM HOOK\n\nconst BoobIconContainer = ({\n  history,\n  current,\n  side,\n  finishFeed,\n  feedCounter,\n  setFeedCounter,\n  isActive,\n  setIsActive,\n  timeStarted,\n  setTimeStarted,\n  isPaused,\n  setIsPaused\n}) => {\n\n\n  useInterval(() => {\n    if (isActive) {\n      setFeedCounter(feedCounter + 1);\n    }\n  }, !isPaused ? 1000 : null);\n\n\n  let buttonText;\n\n  if (!timeStarted) {\n    buttonText = 'START';\n  } else if (isActive && timeStarted && !isPaused) {\n    buttonText = 'PAUSE';\n  } else {\n    buttonText = 'RESUME'\n  }\n\n  const secondsToMinutes = (time) => {\n    if (time < 60) {\n      return `${time} s`\n    } else {\n      return `${Math.floor(time / 60)}  m`;\n    }\n  };\n\n\n  const handleClick = () => {\n    if (!timeStarted) { // if it is the very first click\n      setTimeStarted(Date.now());\n      setIsPaused(false);\n      setIsActive(true);\n    } else if (isActive) { // if I'm the active container and I've been clicked\n      setIsPaused(!isPaused);\n    } else { // if I'm the inactive container and I've been clicked\n      setIsActive(true);\n      setIsPaused(false);\n    }\n  }\n\n  return (\n    <IconContainer>\n      <BoobIcon\n        onClick={handleClick}\n        selected={isActive}\n      >\n        <ButtonText selected={isActive}>{side}: {secondsToMinutes(feedCounter)}</ButtonText>\n        <PauseStartButton selected={isActive}>{buttonText}</PauseStartButton>\n      </BoobIcon>\n    </IconContainer >\n  )\n\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    current: state.current,\n    history: state.history,\n  }\n}\n\nconst mapDispatchToProps = { finishFeed }\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BoobIconContainer);","import React, { useState } from 'react';\nimport { connect } from 'react-redux'\nimport styled from 'styled-components';\nimport { white, darkPeach, lightPeach } from '../constants/colours';\nimport { finishFeed } from '../actions/actions';\nimport BoobIconContainer from './BoobIconContainer';\n\nconst IconContainer = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst DoneButton = styled.button`\n    border: 2px solid ${({ disabled }) => disabled ? lightPeach : darkPeach};\n    border-radius: 5px;\n    background-color: ${white};\n    color: ${({ disabled }) => disabled ? lightPeach : darkPeach};\n    font-size: 1.1rem;\n    font-weight: 700;\n    padding: 12px 40px;\n    width: 50%;\n`;\n\nconst TotalTimeText = styled.p`\n  color: ${white};\n  font-size: 1.1rem;\n  font-weight: 700;\n`;\n\n\nconst Timer = ({ finishFeed }) => {\n  const [leftFeedCounter, setLeftFeedCounter] = useState(0);\n  const [rightFeedCounter, setRightFeedCounter] = useState(0);\n  const [timeStarted, setTimeStarted] = useState('');\n  const [leftSideActive, setLeftSideActive] = useState(undefined);\n  const [isPaused, setIsPaused] = useState(true);\n\n  const handleFinishFeed = () => {\n    const date = timeStarted;\n    const leftTime = leftFeedCounter;\n    const rightTime = rightFeedCounter;\n    const lastFedOnLeftSide = leftSideActive;\n\n    finishFeed(date, leftTime, rightTime, lastFedOnLeftSide);\n    setLeftFeedCounter(0);\n    setRightFeedCounter(0);\n    setLeftSideActive(undefined);\n    setTimeStarted('');\n    setIsPaused(true);\n  };\n\n\n  const totalTime = leftFeedCounter + rightFeedCounter;\n\n  const secondsToTime = (time) => {\n    return (time - (time %= 60)) / 60 + (9 < time ? ':' : ':0') + time\n  }\n\n\n  return (\n    <div>\n      <IconContainer>\n        <BoobIconContainer\n          feedCounter={leftFeedCounter}\n          setFeedCounter={setLeftFeedCounter}\n          isActive={leftSideActive === true}\n          setIsActive={() => setLeftSideActive(true)}\n          timeStarted={timeStarted}\n          setTimeStarted={setTimeStarted}\n          isPaused={isPaused}\n          setIsPaused={setIsPaused}\n          side='Left'\n        />\n        <BoobIconContainer\n          feedCounter={rightFeedCounter}\n          setFeedCounter={setRightFeedCounter}\n          isActive={leftSideActive === false}\n          setIsActive={() => setLeftSideActive(false)}\n          timeStarted={timeStarted}\n          setTimeStarted={setTimeStarted}\n          isPaused={isPaused}\n          setIsPaused={setIsPaused}\n          side='Right'\n        />\n      </IconContainer>\n      <ButtonContainer>\n        <TotalTimeText>TOTAL TIME: {secondsToTime(totalTime)} seconds </TotalTimeText>\n        <DoneButton disabled={!timeStarted} onClick={handleFinishFeed}>DONE</DoneButton>\n      </ButtonContainer >\n    </div >\n  )\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    current: state.current,\n    history: state.history,\n  }\n}\n\nconst mapDispatchToProps = { finishFeed }\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Timer)\n","import React from 'react';\nimport styled from 'styled-components';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { white, darkPeach } from '../constants/colours';\n\nconst NotificationContainer = styled.div`\n    border: 1px solid ${white};\n    border-radius: 5px;\n    padding: 6px;\n    margin: 0 12px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n`;\n\nconst NotificationText = styled.p`\n    font-size: 16px;\n    color: ${white};\n    text-align: center;\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n  color: ${darkPeach};\n`;\n\nconst Notification = ({ history }) => {\n\n\n  if (history.length) {\n    const { lastFedOnLeftSide, date } = _.last(history);\n\n    const timeLastFed = moment(date).format('LT');;\n\n\n    return (\n      <NotificationContainer>\n        <NotificationText>You last fed on the\n        <StrongSpan>{lastFedOnLeftSide ? ' LEFT ' : ' RIGHT '}</StrongSpan>side, starting at <StrongSpan>{timeLastFed}.</StrongSpan>\n        </NotificationText>\n      </NotificationContainer>\n    )\n  }\n  console.log('HOME HISTORY', history);\n  return (\n    <NotificationContainer>\n      <NotificationText>Welcome! Start recording your first feed!</NotificationText>\n    </NotificationContainer>\n  )\n};\n\n\nexport default Notification;","import React from 'react';\nimport styled from 'styled-components';\nimport Header from '../components/Header';\nimport Timer from '../components/Timer';\nimport Notification from '../components/Notification';\nimport { peach, orange } from '../constants/colours';\n\n\nconst MainContainer = styled.div`\n  background-image: linear-gradient(to bottom right, ${peach}, ${orange}); \n  height: calc(100vh - 50px);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n`;\n\nconst Home = ({ history }) => {\n\n    return (\n        <MainContainer>\n            <Header />\n            <Timer />\n            <Notification history={history} />\n        </MainContainer>\n    );\n\n}\n\nexport default Home;","import React from 'react';\nimport moment from 'moment';\nimport styled from 'styled-components';\nimport { peach, orange, white } from '../constants/colours';\n\n\nconst MainContainer = styled.div`\n  background-image: linear-gradient(to bottom right, ${peach}, ${orange}); \n  min-height: 100vh;\n  padding: 0 12px 62px 12px\n`;\n\nconst FeedItemContainer = styled.div`\n    border: 2px solid ${white};\n    border-radius: 5px;\n    padding: 6px;\n    margin: 0 12px;\n    background-color: rgba( 256, 256, 256, 0.1 );\n    margin-bottom 62px; \n`; // change margin-bottom to only applied to the last item\n\nconst FeedItemText = styled.p`\n  color: ${white};\n`;\n\nconst FeedHeader = styled.p`\n  color: ${white};\n  font-size: 1.1rem;\n  font-weight: 700;\n  margin-top: 0;\n  padding-top: 12px;\n\n`;\n\nconst StrongSpan = styled.span`\n  font-weight: 700;\n`;\n\nconst History = ({ history }) => {\n\n  const secondsToTime = (time) => {\n    return (time - (time %= 60)) / 60 + (9 < time ? ':' : ':0') + time\n  }\n\n\n  const historyItems = history.map((i) => {\n    const totalTime = i.leftTime + i.rightTime;\n    const side = i.lastFedOnLeftSide ? 'Left' : \"Right\";\n    const dateTime = moment(i.date).format('MMM Do YYYY, h:mm a')\n\n    return (\n      <FeedItemContainer key={i.date}>\n        <FeedItemText><StrongSpan>{dateTime}</StrongSpan></FeedItemText>\n        <FeedItemText><StrongSpan>Total time: </StrongSpan>{secondsToTime(totalTime)}</FeedItemText>\n        <FeedItemText><StrongSpan>Last side: </StrongSpan>{side}</FeedItemText>\n      </FeedItemContainer>\n\n    )\n\n  })\n\n  const noHistory = <FeedItemContainer><FeedItemText>Welcome, record your first feed to see your history!</FeedItemText></FeedItemContainer>\n\n  return (\n    <MainContainer>\n      <FeedHeader>Your Feed Log:</FeedHeader>\n      {history.length ? historyItems : noHistory}\n    </MainContainer>\n  )\n\n}\n\nexport default History;","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport styled from 'styled-components';\nimport Home from './components/Home';\nimport History from './components/History';\nimport home from './assets/home.svg';\nimport activity from './assets/development.svg';\nimport { white } from './constants/colours';\n\n\nconst NavIconContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  background: ${white};\n  padding: 12px 0;\n  flex-grow: 0;\n  flex-basis: 50px;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n`;\n\nconst NavIcons = styled.img`\n    max-width: 36px;\n`;\n\nconst App = ({ history, current }) => {\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" >\n          <Home history={history} current={current} />\n        </Route>\n        <Route exact path=\"/history\" >\n          <History history={history} />\n        </Route>\n      </Switch>\n\n      <NavIconContainer>\n        <Link to='/'>\n          <NavIcons src={home} alt=\"home icon\" />\n        </Link>\n        <Link to='/history'>\n          <NavIcons src={activity} alt=\"activity log icon\" />\n        </Link>\n      </NavIconContainer>\n\n    </Router >\n  );\n\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    history: state.history,\n    current: state.current\n  }\n}\n\nexport default connect(\n  mapStateToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FINISH_FEED } from '../actions/actions';\n\nconst initialState = {\n  current: {\n    date: null,\n    leftBoob: {\n      time: 0\n    },\n    rightBoob: {\n      time: 0\n    },\n    lastFedOnLeftSide: ''\n  },\n  history: []\n};\n\nfunction rootReducer(state = initialState, action) {\n  console.log(\"every action\", action)\n\n  switch (action.type) {\n\n    case FINISH_FEED:\n      return (\n        {\n          current: {\n            date: action.date,\n            leftBoob: {\n              time: action.leftTime\n            },\n            rightBoob: {\n              time: action.rightTime\n            },\n            lastFedOnLeftSide: action.side\n          },\n          history: [\n            ...state.history,\n            action.payload\n          ]\n        });\n    default:\n      return state;\n  };\n}\n\nexport default rootReducer;","import { createStore } from 'redux';\nimport rootReducer from './reducers/reducers';\n\nexport default createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n)\nserviceWorker.unregister();\n"],"sourceRoot":""}