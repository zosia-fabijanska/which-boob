{"version":3,"sources":["assets/breastWhite.svg","assets/home.svg","assets/development.svg","constants/colours.js","components/Header.js","components/BoobIconContainer.js","components/Timer.js","components/Notification.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","white","Title","styled","p","Header","React","Component","IconContainer","div","BoobIconLeft","img","BoobIconRight","BoobIconContainer","src","breastIcon","alt","ButtonContainer","StartButton","button","Timer","useState","startTime","setStartTime","isClicked","setIsClicked","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","onClick","NotificationContainer","NotificationText","Notification","NavIconContainer","NavIcons","NavBar","home","activity","MainContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,8LCC9BC,EAAQ,U,mLCGrB,IAAMC,EAAQC,IAAOC,EAAV,IAEEH,GAcEI,E,iLANP,OACI,kBAACH,EAAD,wB,GAHSI,IAAMC,W,wYCR3B,IAAMC,EAAgBL,IAAOM,IAAV,KAKbC,EAAeP,IAAOQ,IAAV,KAMZC,EAAgBT,IAAOQ,IAAV,KAgBJE,E,iLATX,OACE,kBAACL,EAAD,KACE,kBAACE,EAAD,CAAcI,IAAKC,IAAYC,IAAI,wBACnC,kBAACJ,EAAD,CAAeE,IAAKC,IAAYC,IAAI,8B,GALZV,IAAMC,W,0XChBtC,IAAMU,EAAkBd,IAAOM,IAAV,KAMfS,EAAcf,IAAOgB,OAAV,IACOlB,EHXH,UGcRA,GAsDEmB,EA1BD,WAAO,IAAD,EACgBC,mBAAS,GADzB,mBACXC,EADW,KACAC,EADA,OAEgBF,oBAAS,GAFzB,mBAEXG,EAFW,KAEAC,EAFA,MApBA,SAACC,EAAUC,GAC7B,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,IAOJQ,EAAY,WACNX,GACFD,EAAaD,EAAY,KAE1B,KAMH,OACE,kBAACL,EAAD,KACE,2BAAIK,EAAJ,YACA,kBAACJ,EAAD,CACEkB,QARa,WACjBX,GAAcD,KASTA,EAAY,QAAU,W,2SC1D/B,IAAMa,EAAwBlC,IAAOM,IAAV,IACHR,GAMlBqC,EAAmBnC,IAAOC,EAAV,IAETH,GAcEsC,E,iLARX,OACE,kBAACF,EAAD,KACE,kBAACC,EAAD,4BAAsC,wCAAtC,c,GAJmBhC,IAAMC,W,4SCXjC,IAAMiC,EAAmBrC,IAAOM,IAAV,IAGIR,GAIpBwC,EAAWtC,IAAOQ,IAAV,KAeC+B,E,iLATX,OACE,kBAACF,EAAD,KACE,kBAACC,EAAD,CAAU3B,IAAK6B,IAAM3B,IAAI,cACzB,kBAACyB,EAAD,CAAU3B,IAAK8B,IAAU5B,IAAI,2B,GALhBV,IAAMC,W,8LCP3B,IAAMsC,EAAgB1C,IAAOM,IAAV,INVE,WM8BNqC,MAZf,WACE,OACE,kBAACD,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCbcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.08b08cc9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/breastWhite.8ce30e07.svg\";","module.exports = __webpack_public_path__ + \"static/media/home.83e24a55.svg\";","module.exports = __webpack_public_path__ + \"static/media/development.fa20f2a7.svg\";","export const peach = '#F08387';\nexport const white = '#FFFFFF';","import React from 'react';\nimport styled from 'styled-components';\nimport { white } from '../constants/colours';\n\nconst Title = styled.p`\n    font-size: 24px;\n    color: ${white};\n    padding-top: 50px;\n    margin-top: 0;\n    text-align: center;\n`;\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <Title>Which Buub?</Title>\n        )\n    }\n};\n\nexport default Header;","import React from 'react';\nimport styled from 'styled-components';\nimport breastIcon from '../assets/breastWhite.svg';\n\nconst IconContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst BoobIconLeft = styled.img`\n    max-width: 120px;\n    transform: scaleX(-1);\n    margin: 0 16px;\n`;\n\nconst BoobIconRight = styled.img`\n    max-width: 120px;\n    margin: 0 16px;\n`;\n\nclass BoobIconContainer extends React.Component {\n  render() {\n    return (\n      <IconContainer>\n        <BoobIconLeft src={breastIcon} alt='icon of left breast' />\n        <BoobIconRight src={breastIcon} alt='icon of right breast' />\n      </IconContainer>\n    )\n  }\n};\n\nexport default BoobIconContainer;","import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { white, peach } from '../constants/colours';\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst StartButton = styled.button`\n    border: 1px solid ${white};\n    border-radius: 5px;\n    background: ${peach};\n    color: ${white}\n    font-size: 18px;\n    padding: 12px 40px;\n    max-width: 50%;\n`;\n\n// CUSTOM HOOK: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nconst Timer = () => {\n  const [startTime, setStartTime] = useState(0);\n  const [isClicked, setIsClicked] = useState(false);\n\n  useInterval(() => {\n    if (isClicked) {\n      setStartTime(startTime + 1);\n    }\n  }, 1000);\n\n  const startTimer = () => {\n    setIsClicked(!isClicked);\n  }\n\n  return (\n    <ButtonContainer>\n      <p>{startTime} seconds</p>\n      <StartButton\n        onClick={startTimer}\n      >\n        {isClicked ? 'PAUSE' : 'START'}\n      </StartButton>\n    </ButtonContainer >\n  )\n};\n\nexport default Timer;","import React from 'react';\nimport styled from 'styled-components';\nimport { white } from '../constants/colours';\n\nconst NotificationContainer = styled.div`\n    border: 1px solid ${white};\n    border-radius: 5px;\n    padding: 6px;\n    margin: 0 12px;\n`;\n\nconst NotificationText = styled.p`\n    font-size: 16px;\n    color: ${white};\n    text-align: center;\n`;\n\nclass Notification extends React.Component {\n  render() {\n    return (\n      <NotificationContainer>\n        <NotificationText>You last fed on the <strong>LEFT</strong> side</NotificationText>\n      </NotificationContainer>\n    )\n  }\n};\n\nexport default Notification;","import React from 'react';\nimport styled from 'styled-components';\nimport home from '../assets/home.svg';\nimport activity from '../assets/development.svg';\nimport { white } from '../constants/colours';\n\nconst NavIconContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  border-top: solid 2px ${white};\n  padding: 12px 0;\n`;\n\nconst NavIcons = styled.img`\n    max-width: 36px;\n`;\n\nclass NavBar extends React.Component {\n  render() {\n    return (\n      <NavIconContainer>\n        <NavIcons src={home} alt=\"home icon\" />\n        <NavIcons src={activity} alt=\"activity log icon\" />\n      </NavIconContainer>\n    )\n  }\n};\n\nexport default NavBar;","import React from 'react';\nimport styled from 'styled-components';\nimport Header from './components/Header';\nimport BoobIconContainer from './components/BoobIconContainer';\nimport Timer from './components/Timer';\nimport Notification from './components/Notification';\nimport NavBar from './components/NavBar';\nimport { peach } from './constants/colours';\n\n\nconst MainContainer = styled.div`\n  background: ${peach}; \n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nfunction App() {\n  return (\n    <MainContainer>\n      <Header />\n      <BoobIconContainer />\n      <Timer />\n      <Notification />\n      <NavBar />\n    </MainContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}